{% comment %}
  <link rel="stylesheet" href="{{ 'switcher.css' | asset_url }}">

  <ciwiswitcher-form>
    {% form 'localization' %}
      <div
        id="ciwi-container"
        class="ciwi_container"
      >
        <div
          id="selector-box"
          style="background: #fff; border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 5px; width: 100%; display: none"
        >
          <input type="hidden" name="market" value="{{ localization.market.id }}">
          <label for="language-switcher" class="language_title">Language</label>
          <div class="select-wrapper">
            <select id="language-switcher" class="ciwi_select">
              {% for language in localization.available_languages %}
                <option
                  value="{{language.iso_code}}"
                  {% if language.iso_code == localization.language.iso_code %}
                    selected
                  {% endif %}
                >
                  {{ language.endonym_name | capitalize }}
                </option>
              {% endfor %}
            </select>
            <img
              id="language-arrow-icon"
              class="arrow_icon"
              src="{{ 'arrow.svg' | asset_url }}"
              alt="Arrow Icon"
              width="25%"
              height="25%"
            >
          </div>
          <input type="hidden" name="language_code" value="{{ localization.language.iso_code }}">

          <label for="currency-switcher" class="currency_title">Currency</label>
          <div class="select-wrapper">
            <select id="currency-switcher" class="ciwi_select"></select>
            <img
              id="currency-arrow-icon"
              class="arrow_icon"
              src="{{ 'arrow.svg' | asset_url }}"
              alt="Arrow Icon"
              width="25%"
              height="25%"
            >
          </div>
          <input type="hidden" name="currency_code" value="">
          <div class="button_wrapper">
            <button id="switcher-confirm" class="ciwi_switcher_confirm_button">Confirm</button>
            <button id="switcher-close" class="ciwi_switcher_cancel_button">Cancel</button>
          </div>
        </div>
        <input id="queryCiwiId" type="hidden" value="{{ shop.permanent_domain }}">
        <input id="queryMoneyFormat" type="hidden" value="{{ shop.money_format | strip_html }}">
        <div
          id="main-box"
          class="main_box"
        >
          <span id="display-text" class="main_box_text">{{ localization.language.endonym_name | capitalize }}</span>
          <img
            id="mainbox-arrow-icon"
            class="mainarrow_icon"
            src="{{ 'arrow.svg' | asset_url }}"
            alt="Arrow Icon"
            width="25%"
            height="25%"
          >
          <img
            class="mobile_trans_img"
            src="{{ 'trans.png' | asset_url }}"
            alt="Button Image"
            width="50px"
            height="50px"
          >
        </div>
      </div>
    {% endform %}
  </ciwiswitcher-form>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" async></script>
  <script src="{{ 'switcher.js' | asset_url }}" async></script>
{% endcomment %}
<link rel="stylesheet" href="{{ 'switcher.css' | asset_url }}">

<div id="ciwi-container" class="ciwi_container">
  <div id="google_translate_element" style="display: none;"></div>
  <select onchange="goTranslate(this.value)" translate="no" id="ciwi-selector"></select>
</div>

<script src="https://code.jquery.com/jquery-1.11.3.min.js" defer></script>
<script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit" defer></script>

<script type="text/javascript">
  // 初始化 Google Translate
  function googleTranslateElementInit() {
    new google.translate.TranslateElement(
      {
        pageLanguage: 'auto', // 自动检测页面语言
        autoDisplay: false,
        layout: google.translate.TranslateElement.InlineLayout.VERTICAL,
        multilanguage: true, // 只允许翻译某个指定容器
      },
      'google_translate_element'
    );
  }

  window.onload = async function () {
    const observer = new MutationObserver((mutationsList, observer) => {
      mutationsList.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
          // 恢复之前的样式
          document.body.style.top = '0'; // 恢复到原来的值（或其他需要的值）
        }
      });
    });
    observer.observe(document.body, { attributes: true });
    const targetElement = document.querySelector('.alireviews-review-box');
    const translateOptions = {
      target: targetElement, // 设置翻译范围
      pageLanguage: 'auto',
    };

    // 初始化 Google Translate 只针对 ciwi_translatable 类
    const translateInstance = new google.translate.TranslateElement(translateOptions, 'google_translate_element');

    const originalLang = document.documentElement.lang || 'en'; // 默认语言为英文
    localStorage.setItem('originalLang', originalLang);
    console.log(originalLang);
    let currentLang = localStorage.getItem('currentLang');
    console.log(currentLang);
    $('.goog-te-combo').val(currentLang);
    const triggerEvent = (element, eventName) => {
      const event = new Event(eventName);
      element.dispatchEvent(event);
    };
    triggerEvent(document.querySelector('.goog-te-combo'), 'change');
    let data = [
      { code: 'ab', name: 'Abkhaz' },
      { code: 'ace', name: 'Acehnese' },
      { code: 'ach', name: 'Acholi' },
      { code: 'af', name: 'Afrikaans' },
      { code: 'sq', name: 'Albanian' },
      { code: 'alz', name: 'Alur' },
      { code: 'am', name: 'Amharic' },
      { code: 'ar', name: 'Arabic' },
      { code: 'hy', name: 'Armenian' },
      { code: 'as', name: 'Assamese' },
      { code: 'awa', name: 'Awadhi' },
      { code: 'ay', name: 'Aymara' },
      { code: 'az', name: 'Azerbaijani' },
      { code: 'ban', name: 'Balinese' },
      { code: 'bm', name: 'Bambara' },
      { code: 'ba', name: 'Bashkir' },
      { code: 'eu', name: 'Basque' },
      { code: 'btx', name: 'Batak Karo' },
      { code: 'bts', name: 'Batak Simalungun' },
      { code: 'bbc', name: 'Batak Toba' },
      { code: 'be', name: 'Belarusian' },
      { code: 'bem', name: 'Bemba' },
      { code: 'bn', name: 'Bengali' },
      { code: 'bew', name: 'Betawi' },
      { code: 'bho', name: 'Bhojpuri' },
      { code: 'bik', name: 'Bikol' },
      { code: 'bs', name: 'Bosnian' },
      { code: 'br', name: 'Breton' },
      { code: 'bg', name: 'Bulgarian' },
      { code: 'bua', name: 'Buryat' },
      { code: 'yue', name: 'Cantonese' },
      { code: 'ca', name: 'Catalan' },
      { code: 'ceb', name: 'Cebuano' },
      { code: 'ny', name: 'Chichewa (Nyanja)' },
      { code: 'zh-CN', name: 'Chinese (Simplified)' },
      { code: 'zh-TW', name: 'Chinese (Traditional)' },
      { code: 'cv', name: 'Chuvash' },
      { code: 'co', name: 'Corsican' },
      { code: 'crh', name: 'Crimean Tatar' },
      { code: 'hr', name: 'Croatian' },
      { code: 'cs', name: 'Czech' },
      { code: 'da', name: 'Danish' },
      { code: 'din', name: 'Dinka' },
      { code: 'dv', name: 'Divehi' },
      { code: 'doi', name: 'Dogri' },
      { code: 'dov', name: 'Dombe' },
      { code: 'nl', name: 'Dutch' },
      { code: 'dz', name: 'Dzongkha' },
      { code: 'en', name: 'English' },
      { code: 'eo', name: 'Esperanto' },
      { code: 'et', name: 'Estonian' },
      { code: 'ee', name: 'Ewe' },
      { code: 'fj', name: 'Fijian' },
      { code: 'fil', name: 'Filipino (Tagalog)' },
      { code: 'tl', name: 'Filipino (Tagalog)' },
      { code: 'fi', name: 'Finnish' },
      { code: 'fr', name: 'French' },
      { code: 'fr-FR', name: 'French (French)' },
      { code: 'fr-CA', name: 'French (Canadian)' },
      { code: 'fy', name: 'Frisian' },
      { code: 'ff', name: 'Fulfulde' },
      { code: 'gaa', name: 'Ga' },
      { code: 'gl', name: 'Galician' },
      { code: 'lg', name: 'Ganda (Luganda)' },
      { code: 'ka', name: 'Georgian' },
      { code: 'de', name: 'German' },
      { code: 'el', name: 'Greek' },
      { code: 'gn', name: 'Guarani' },
      { code: 'gu', name: 'Gujarati' },
      { code: 'ht', name: 'Haitian Creole' },
      { code: 'cnh', name: 'Hakha Chin' },
      { code: 'ha', name: 'Hausa' },
      { code: 'haw', name: 'Hawaiian' },
      { code: 'iw', name: 'Hebrew' },
      { code: 'he', name: 'Hebrew' },
      { code: 'hil', name: 'Hiligaynon' },
      { code: 'hi', name: 'Hindi' },
      { code: 'hmn', name: 'Hmong' },
      { code: 'hu', name: 'Hungarian' },
      { code: 'hrx', name: 'Hunsrik' },
      { code: 'is', name: 'Icelandic' },
      { code: 'ig', name: 'Igbo' },
      { code: 'ilo', name: 'Iloko' },
      { code: 'id', name: 'Indonesian' },
      { code: 'ga', name: 'Irish' },
      { code: 'it', name: 'Italian' },
      { code: 'ja', name: 'Japanese' },
      { code: 'jw', name: 'Javanese' },
      { code: 'jv', name: 'Javanese' },
      { code: 'kn', name: 'Kannada' },
      { code: 'pam', name: 'Kapampangan' },
      { code: 'kk', name: 'Kazakh' },
      { code: 'km', name: 'Khmer' },
      { code: 'cgg', name: 'Kiga' },
      { code: 'rw', name: 'Kinyarwanda' },
      { code: 'ktu', name: 'Kituba' },
      { code: 'gom', name: 'Konkani' },
      { code: 'ko', name: 'Korean' },
      { code: 'kri', name: 'Krio' },
      { code: 'ku', name: 'Kurdish (Kurmanji)' },
      { code: 'ckb', name: 'Kurdish (Sorani)' },
      { code: 'ky', name: 'Kyrgyz' },
      { code: 'lo', name: 'Lao' },
      { code: 'ltg', name: 'Latgalian' },
      { code: 'la', name: 'Latin' },
      { code: 'lv', name: 'Latvian' },
      { code: 'lij', name: 'Ligurian' },
      { code: 'li', name: 'Limburgan' },
      { code: 'ln', name: 'Lingala' },
      { code: 'lt', name: 'Lithuanian' },
      { code: 'lmo', name: 'Lombard' },
      { code: 'luo', name: 'Luo' },
      { code: 'lb', name: 'Luxembourgish' },
      { code: 'mk', name: 'Macedonian' },
      { code: 'mai', name: 'Maithili' },
      { code: 'mak', name: 'Makassar' },
      { code: 'mg', name: 'Malagasy' },
      { code: 'ms', name: 'Malay' },
      { code: 'ms-Arab', name: 'Malay (Jawi)' },
      { code: 'ml', name: 'Malayalam' },
      { code: 'mt', name: 'Maltese' },
      { code: 'mi', name: 'Maori' },
      { code: 'mr', name: 'Marathi' },
      { code: 'chm', name: 'Meadow Mari' },
      { code: 'mni-Mtei', name: 'Meiteilon (Manipuri)' },
      { code: 'min', name: 'Minang' },
      { code: 'lus', name: 'Mizo' },
      { code: 'mn', name: 'Mongolian' },
      { code: 'my', name: 'Myanmar (Burmese)' },
      { code: 'nr', name: 'Ndebele (South)' },
      { code: 'new', name: 'Nepalbhasa (Newari)' },
      { code: 'ne', name: 'Nepali' },
      { code: 'nso', name: 'Northern Sotho (Sepedi)' },
      { code: 'no', name: 'Norwegian' },
      { code: 'nus', name: 'Nuer' },
      { code: 'oc', name: 'Occitan' },
      { code: 'or', name: 'Odia (Oriya)' },
      { code: 'om', name: 'Oromo' },
      { code: 'pag', name: 'Pangasinan' },
      { code: 'pap', name: 'Papiamento' },
      { code: 'ps', name: 'Pashto' },
      { code: 'fa', name: 'Persian' },
      { code: 'pl', name: 'Polish' },
      { code: 'pt', name: 'Portuguese' },
      { code: 'pt-PT', name: 'Portuguese (Portugal)' },
      { code: 'pt-BR', name: 'Portuguese (Brazil)' },
      { code: 'pa', name: 'Punjabi' },
      { code: 'pa-Arab', name: 'Punjabi (Shahmukhi)' },
      { code: 'qu', name: 'Quechua' },
      { code: 'rom', name: 'Romani' },
      { code: 'ro', name: 'Romanian' },
      { code: 'rn', name: 'Rundi' },
      { code: 'ru', name: 'Russian' },
      { code: 'sm', name: 'Samoan' },
      { code: 'sg', name: 'Sango' },
      { code: 'sa', name: 'Sanskrit' },
      { code: 'gd', name: 'Scots Gaelic' },
      { code: 'sr', name: 'Serbian' },
      { code: 'st', name: 'Sesotho' },
      { code: 'crs', name: 'Seychellois Creole' },
      { code: 'shn', name: 'Shan' },
      { code: 'sn', name: 'Shona' },
      { code: 'scn', name: 'Sicilian' },
      { code: 'szl', name: 'Silesian' },
      { code: 'sd', name: 'Sindhi' },
      { code: 'si', name: 'Sinhala (Sinhalese)' },
      { code: 'sk', name: 'Slovak' },
      { code: 'sl', name: 'Slovenian' },
      { code: 'so', name: 'Somali' },
      { code: 'es', name: 'Spanish' },
      { code: 'su', name: 'Sundanese' },
      { code: 'sw', name: 'Swahili' },
      { code: 'ss', name: 'Swati' },
      { code: 'sv', name: 'Swedish' },
      { code: 'tg', name: 'Tajik' },
      { code: 'ta', name: 'Tamil' },
      { code: 'tt', name: 'Tatar' },
      { code: 'te', name: 'Telugu' },
      { code: 'tet', name: 'Tetum' },
      { code: 'th', name: 'Thai' },
      { code: 'ti', name: 'Tigrinya' },
      { code: 'ts', name: 'Tsonga' },
      { code: 'tn', name: 'Tswana' },
      { code: 'tr', name: 'Turkish' },
      { code: 'tk', name: 'Turkmen' },
      { code: 'ak', name: 'Twi (Akan)' },
      { code: 'uk', name: 'Ukrainian' },
      { code: 'ur', name: 'Urdu' },
      { code: 'ug', name: 'Uyghur' },
      { code: 'uz', name: 'Uzbek' },
      { code: 'vi', name: 'Vietnamese' },
      { code: 'cy', name: 'Welsh' },
      { code: 'xh', name: 'Xhosa' },
      { code: 'yi', name: 'Yiddish' },
      { code: 'yo', name: 'Yoruba' },
      { code: 'yua', name: 'Yucatec Maya' },
      { code: 'zu', name: 'Zulu' },
    ];
    const ciwiselector = document.getElementById('ciwi-selector');
    data.forEach((lang) => {
      const option = new Option(`${lang.name}`, `${lang.code}`);
      if (lang.code == currentLang) {
        option.selected = true;
      }
      ciwiselector.add(option);
    });
    $('.goog-te-gadget').html($('.goog-te-gadget div'));
  };

  // 处理语言切换
  function goTranslate(lang) {
    console.log(lang);
    $('.goog-te-combo').val(lang);
    const triggerEvent = (element, eventName) => {
      const event = new Event(eventName);
      element.dispatchEvent(event);
    };
    triggerEvent(document.querySelector('.goog-te-combo'), 'change');
    const currentLang = lang || 'en'; // 默认语言为英文
    localStorage.setItem('currentLang', currentLang);
  }
</script>

{% schema %}
{
  "name": "Ciwi_Switcher",
  "target": "body",
  "settings": []
}
{% endschema %}
