<div id="container" style="position: fixed; bottom: 80px; right: 20px; width: 200px; display: none;">
  <div
    id="selector-box"
    style="background: #fff; border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 5px; width: 100%;"
  >
    {% if localization.available_languages.size > 1 %}
      <ciwiswitcher-form>
        {% form 'localization' %}
          <select id="language-switcher" style="width: 100%;">
            {% for language in localization.available_languages %}
              <option
                value="{{language.iso_code}}"
                {% if language.iso_code == localization.language.iso_code %}
                  selected
                {% endif %}
              >
                {{ language.endonym_name | capitalize }}
              </option>
            {% endfor %}
          </select>
          <input type="hidden" name="language_code" value="{{ localization.language.iso_code }}">

          <select id="currency-switcher" style="margin-top: 10px; width: 100%;"></select>

          <input type="hidden" name="currency_code" value="">

          <button id="switcher-confirm" style="margin-top: 10px;">确定</button>
          <button onclick="toggleSelector()" style="margin-left: 5px;">关闭</button>
        {% endform %}
      </ciwiswitcher-form>
      <input id="queryCiwiId" hidden value="{{ shop.permanent_domain }}">
    {% endif %}
  </div>

  <div
    id="main-box"
    style="background: #f0f0f0; padding: 10px; border-radius: 5px; cursor: pointer; text-align: center;"
  >
    <span id="display-text">{{ localization.language.endonym_name | capitalize }}</span>
    <span id="arrow" style="float: right;"><i class="fas fa-chevron-up"></i></span>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" async></script>

<script>
  // 模拟从后端获取语言和货币选项
  async function fetchCurrencies(shop) {
    return new Promise((resolve) => {
      setTimeout(() => {
        // 模拟的后端数据
        const data = {
          currencies: [
            { currencyCode: 'EUR', symbol: '€', exchangeRate: null, rounding: null, default: 1 },
            { currencyCode: 'CNY', symbol: '￥', exchangeRate: 7.15, rounding: '', default: 1 },
            { currencyCode: 'USD', symbol: '$', exchangeRate: 2.0, rounding: '0.99', default: 1 },
          ],
        };
        resolve(data);
      }, 200); // 模拟网络延迟
    });

    {% comment %} console.log('shopName: ', shop);
    const response = await axios({
      url: `https://springbackendservice-e3hgbjgqafb9cpdh.canadacentral-01.azurewebsites.net/currency/getCurrencyByShopName`,
      method: "POST",
      data: {
        shopName: shop,
      },
    });

    const res = response.data.response;
    console.log('currency: ', res);
    if (res) {
      const data = res.map((item) => ({
        key: item.id, // 将 id 转换为 key
        currency: item.currencyName, // 将 currencyName 作为 currency
        rounding: item.rounding,
        exchangeRate: item.exchangeRate,
        currencyCode: item.currencyCode,
      }));
      return data;
    } else {
      return undefined;
    } {% endcomment %}
  }

  // 页面加载时获取语言和货币选项
  window.onload = async function () {
    const shop = document.getElementById('queryCiwiId');
    const {data} = await fetchCurrencies(shop.value);
    console.log('currencies: ', data);

    let value = localStorage.getItem('selectedCurrency');
    const isValueInCurrencies = data.find((currency) => currency.currencyCode === value);
    console.log(isValueInCurrencies);

    // 填充货币选择框
    const currencySwitcher = document.getElementById('currency-switcher');
    const currencyInput = document.querySelector('input[name="currency_code"]');

    if (value && isValueInCurrencies) {
      console.log(value, data);
      const prices = document.querySelectorAll('.ciwi-money');

      // 遍历每个元素并获取它们的值
      prices.forEach((price) => {
        // 获取当前选择框的值
        const priceText = price.innerText;
        const transformedPrice = transform(
          priceText,
          isValueInCurrencies.exchangeRate,
          isValueInCurrencies.symbol,
          isValueInCurrencies.currencyCode,
          isValueInCurrencies.rounding
        ); // 获取转换后的价格
        console.log('priceText:', priceText); // 输出该元素的值
        console.log('transformedPrice:', transformedPrice); // 输出该元素的值

        // 如果转换成功，将转换后的值填回原位置
        if (transformedPrice) {
          price.innerText = transformedPrice; // 更新元素的文本内容
        }
      });
      currencyInput.value = value;
      currencySwitcher.value = value;
      data.forEach((currency) => {
        const option = new Option(`${currency.currencyCode}(${currency.symbol})`, currency.currencyCode);
        if (currency.currencyCode == value) {
          option.selected = true;
        }
        currencySwitcher.add(option);
      });
    } else {
      console.log('1');
      currencyInput.value = data[0];
      currencySwitcher.value = data[0].currencyCode;
      data.forEach((currency) => {
        const option = new Option(`${currency.currencyCode}(${currency.symbol})`, currency.currencyCode);
        currencySwitcher.add(option);
      });
    }

    function updateDisplayText() {
      const currency = document.getElementById('currency-switcher').selectedOptions[0].value;
      const displayTextElement = document.getElementById('display-text');
      displayTextElement.textContent += ` / ${currency}`; // 在原有文本后追加
    }

    function transform(price, exchangeRate, symbol, currencyCode, rounding) {
      console.log('symbol:', symbol); // 输出该元素的值
      console.log('currencyCode:', currencyCode); // 输出该元素的值

      const numMatch = price.match(/[\d,]+(?:\.\d+)?/);
      console.log('numMatch:', numMatch); // 输出该元素的值

      if (!numMatch) {
        return price; // 如果没有找到数字部分，返回原始文本
      }

      // 提取数字
      const numberStr = numMatch[0];
      console.log('numberStr:', numberStr); // 输出该元素的值

      const pointSplit = numberStr.split('.');
      const pointSplitLastPart = pointSplit[pointSplit.length - 1];
      const commaSplit = numberStr.split(',');
      const commaSplitLastPart = commaSplit[commaSplit.length - 1];

      if (pointSplit && pointSplitLastPart.length <= 2) {
        let cleanedNumberStr = numberStr.replace(/[,\s']/g, '');
        // 使用 parseFloat 转换为数字
        let number = parseFloat(cleanedNumberStr);

        console.log('number:', number); //

        if (isNaN(number)) {
          return price; // 如果转换为数字失败，返回原始文本
        }
        const transformNum = customRounding(number * exchangeRate, rounding);
        // 2. 增加指定的值
        number = detectNumberFormat(numberStr, transformNum, '.', rounding);
        console.log('number:', number); // 输出该元素的值
        const newText = `${symbol}${number} ${currencyCode}`;
        console.log('newText:', 'pointSplit', newText); // 输出该元素的值

        return newText;
      } else if (commaSplit && commaSplitLastPart.length <= 2) {
        let cleanedNumberStr = numberStr.replace(/[.\s']/g, '').replace(/,/g, '.');
        // 使用 parseFloat 转换为数字
        let number = Number(cleanedNumberStr);

        console.log('number:', number); //

        if (isNaN(number)) {
          return price; // 如果转换为数字失败，返回原始文本
        }
        const transformNum = customRounding(number * exchangeRate, rounding);

        // 2. 增加指定的值
        number = detectNumberFormat(numberStr, transformNum, ',', rounding);
        console.log('number:', number); // 输出该元素的值
        const newText = `${symbol}${number} ${currencyCode}`;
        console.log('newText:', 'commaSplit', newText); // 输出该元素的值

        return newText;
      }
    }

    function customRounding(number, rounding) {
      if (!number) {
        return number;
      }
      let roundedNumber = number;
      const integerPart = Math.floor(roundedNumber); // 取整数部分
      switch (rounding) {
        case '':
          console.log('Disabled option');
          return roundedNumber;
        case '0':
          console.log('No decimal');
          return roundedNumber.toFixed(0);
        case '1.00':
          console.log('1 (Recommended)');
          roundedNumber = Math.round(roundedNumber * 100) / 100;
          return roundedNumber;
        case '0.99':
          console.log('Value is 0.99');
          return integerPart + 0.99; // 用0.99替换小数部分
        case '0.95':
          console.log('Value is 0.95');
          return integerPart + 0.95; // 用0.95替换小数部分
        case '0.75':
          console.log('Value is 0.75');
          return integerPart + 0.75; // 用0.75替换小数部分
        case '0.5':
          console.log('Value is 0.5');
          return integerPart + 0.5; // 用0.5替换小数部分
        case '0.25':
          console.log('Value is 0.25');
          return integerPart + 0.25; // 用0.25替换小数部分
        default:
          console.log('Unknown value');
          return roundedNumber; // 默认返回原始四舍五入后的数字
      }
    }

    function detectNumberFormat(numberStr, transformNum, point, rounding) {
      console.log('numberStr:', numberStr); // 输出该元素的值
      console.log('transformNum:', transformNum); // 输出该元素的值

      // 检查是否使用逗号作为千位分隔符，点作为小数点分隔符
      let number = transformNum.toString();
      let [integerPart, decimalPart] = number.split(point);

      if (/^\d{1,3}(?:,\d{3})*(?:\.\d+)?$/.test(numberStr)) {
        integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      }

      // 检查是否使用点作为千位分隔符，逗号作为小数点分隔符
      else if (/^\d{1,3}(?:\.\d{3})*(?:,\d+)?$/.test(numberStr)) {
        console.log(2); // 输出该元素的值

        integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      }

      // 检查是否使用空格作为千位分隔符，点或逗号作为小数点分隔符
      else if (/^\d{1,3}(?: \d{3})*(?:[\.,]\d+)?$/.test(numberStr)) {
        console.log(3); // 输出该元素的值

        integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
      }

      // 检查是否使用单引号作为千位分隔符，点作为小数点分隔符
      else if (/^\d{1,3}(?:'\d{3})*(?:\.\d+)?$/.test(numberStr)) {
        console.log(4); // 输出该元素的值
      }
      return decimalPart
        ? `${integerPart}.${Number(`0.${decimalPart}`).toFixed(2).slice(2)}`
        : point && rounding != '0'
        ? `${integerPart}${point}00`
        : `${integerPart}`;
    }

    // 更新主框显示内容
    updateDisplayText();

    // 数据加载完成后显示组件
    document.getElementById('container').style.display = 'block';
  };
</script>

<script>
  class CiwiswitcherForm extends HTMLElement {
    constructor() {
      super();
      this.elements = {
        languageInput: this.querySelector('input[name="language_code"]'),
        currencyInput: this.querySelector('input[name="currency_code"]'),
        button: this.querySelector('#switcher-confirm'),
        languageSwitcher: this.querySelector('#language-switcher'),
        currencySwitcher: this.querySelector('#currency-switcher'),
      };
      this.elements.button.addEventListener('click', this.openSelector.bind(this));
      this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
      this.elements.languageSwitcher.addEventListener('change', this.updateLanguage.bind(this)); // 监听 select 的变化
      this.elements.currencySwitcher.addEventListener('change', this.updateCurrency.bind(this)); // 监听 select 的变化
    }

    openSelector(event) {
      event.preventDefault();
      const form = this.querySelector('form');
      localStorage.setItem('selectedCurrency', this.elements.currencyInput.value);
      if (form) form.submit();
    }

    // 更新语言选择
    updateLanguage(event) {
      const selectedLanguage = event.target.value;
      this.elements.languageInput.value = selectedLanguage; // 更新隐藏的 input 值
      console.log('Language selected:', selectedLanguage); // 输出当前选中的语言
    }

    updateCurrency(event) {
      const selectedCurrency = event.target.value;
      this.elements.currencyInput.value = selectedCurrency; // 更新隐藏的 input 值
      console.log('Currency selected:', selectedCurrency); // 输出当前选中的语言
    }

    closeSelector(event) {
      const box = document.getElementById('selector-box');
      box.style.display = box.style.display === 'none' ? 'block' : 'none';
      const arrow = document.getElementById('arrow');
      arrow.innerHTML =
        box.style.display === 'block' ? '<i class="fas fa-chevron-down"></i>' : '<i class="fas fa-chevron-up"></i>';
    }
  }

  customElements.define('ciwiswitcher-form', CiwiswitcherForm);
</script>

{% schema %}
{
  "name": "Ciwi_Switcher",
  "target": "body",
  "settings": []
}
{% endschema %}
